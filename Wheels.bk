package {
  package Math {
    def E       = 2.71828182845904523536028747135266249775724709369995957496696763
    def Pi      = 3.14159265358979323846264338327950288419716939937510582097494459
    def Phi     = 1.61803398874989484820458683436563811772030917980576286213544862
    def Sqrt2   = 1.41421356237309504880168872420969807856967187537694807317667974
    def SqrtE   = 1.64872127070012814684865078781416357165377610071014801157507931
    def SqrtPi  = 1.77245385090551602729816748334114518279754945612238712821380779
    def SqrtPhi = 1.27201964951406896425242246173749149171560804184009624861664038
    def Ln2     = 0.693147180559945309417232121458176568075500134360255254120680009
    def Log2E   = 1 / Ln2
    def Ln10    = 2.30258509299404568401799145468436420760110148862877297603332790
    def Log10E  = 1 / Ln10
  }

  package Util {
    def un (e) = not e
    def yes (e) = e is true
    def no (e) = e is false
    def null (e) = e is nil or e is [] or e is ""
    def positive (e) = e >= 0
    def negative (e) = not positive(e)
    def even (e) = (e % 2) is 0
    def odd (e) = not even(e)
    def zero (e) = e is 0
    def equal (x, y) = x is y
    def both (x, y) = x and y
    def either (x, y) = x or y
    def less_than (x, y) = x < y
    def more_than (x, y) = x > y
    def more_or_equal (x, y) = x > y
    def less_or_equal (x, y) = x < y
    def add (x, y) = x + y
    def subtract (x, y) = x - y
    def multiply (x, y) = x * y
    def divide (x, y) = x / y
    def modulo (x, y) = x % y
    def max (x, y) = if x > y { x } else { y }
    def min (x, y) = if x < y { x } else { y }
  }

  package List {
    def head (list) = list[0]
    def tail (list) = list - list[0]
    def last (list) = list[list.length - 1]
    def butlast (list) = list - list[list.length - 1]

    def all (f, list) = foldl({ (x, y) -> x and f(y) }, true, list)
    def none (f, list) = foldl({ (x, y) -> not (x and f(y)) }, false, list)
    def some (f, list) = foldl({ (x, y) -> x or f(y) }, false, list)
    def minimum (list) = foldl(Util().min, head(list), list)
    def maximum  (list) = foldl(Util().max, head(list), list)

    def concat (lists) {
      foldl(Util().add, [], lists)
    }

    def concat_map (f, list) {
      concat(map(f, list))
    }

    def reverse (list) {
      def reverse_inner (list, so_far) {
        if list isnt [] {
          reverse_inner(butlast(list), so_far + [last(list)])
        } else { so_far }
      }
      reverse_inner(list, [])
    }

    def index_of (e, list) {
      def idxof_inner (e, list, i) {
        if list is [] {
          -1
        } elsif head(list) is e {
          i
        } else { idxof_inner(e, tail(list), i + 1) }
      }
      idxof_inner(e, list, 0)
    }

    def foldl (f, acc, list) {
      if list isnt [] {
        let r = f(acc, head(list))
        foldl(f, r, tail(list))
      } else { acc }
    }

    def foldr (f, acc, list) = foldl(f, acc, reverse(list))

    def sum (l) = foldl(Util().add, 0, l)
    def product (l) = foldl(Util().multiply, 0, l)

    def take (n, list) {
      filter({ (e, i) -> i <= n }, list)
    }

    def drop (n, list) {
      filter({ (e, i) -> i > n }, list)
    }

    def intersperse (el, list) {
      def intersperse_inner (el, list, acc) {
        if list isnt [] and list.length isnt 1 {
          intersperse_inner(el, tail(list), acc + [head(list), el])
        } elsif list.length is 1 {
          acc + [head(list)]
        } else { acc }
      }
      intersperse_inner(el, list, [])
    }

    def intercalate (xs, xss) {
      concat(intersperse(xs, xss))
    }

    def range (s = 1, e = 100, acc = []) {
      if s is e { acc } else {
        range(s + 1, e, acc + (s))
      }
    }

    def transpose (list) {
      def transpose_inner (list, acc) {
        if list[0] isnt [] {
          transpose_inner(map({ (x) -> tail(x) }, list), acc + [map({ (x) -> head(x) }, list)])
        } else { acc }
      }
      transpose_inner(list, [])
    }

    def map (f, list) {
      let full_list = list
      def map_inner (f, list) {
        if list isnt [] {
          [f(head(list), index_of(head(list), full_list) + 1)] + map_inner(f, tail(list))
        } else {
          []
        }
      }
      map_inner(f, list)
    }

    def filter (f, list) {
      let full_list = list
      def filter_inner (f, list) {
        if list isnt [] {
          if f(head(list), index_of(head(list), full_list) + 1) is true {
            [head(list)] + filter_inner(f, tail(list))
          } else {
            [] + filter_inner(f, tail(list))
          }
        } else {
          []
        }
      }
      filter_inner(f, list)
    }

    def each (f, list) {
      for e of list {
        f(e)
      }
    }
  }
}
