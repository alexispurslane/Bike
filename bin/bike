#!/usr/bin/env ruby -I.
require_relative '../interpreter'
require 'readline'
require 'util.rb'
require 'colorize'

interpreter = Interpreter.new
lexer       = false
parser      = false
debug       = true

LIST = [
  'import',  'class',   'Wheels',
  'wheels',  ':exit',   ':history',
  ':help',   ':lexer',  ':clear',  'observe_property',
  'let',     'var',     'def',     'lambda',
  'with',    'apply',   'while',   'else',
  'unless',  'if',      'println', 'print',
  'package', 'with',    'mixin',   'reopen',
  '...',     ':parser', 'hash',    ':debug'
].sort

comp = proc { |s| LIST.grep(/^#{Regexp.escape(s)}/) }

Readline.completion_append_character = ' '
Readline.completion_proc = comp
prompt_1 = "[1] >> "
prompt_2 = '  ...| '
continue = false
code     = ''
line     = ''
history  = ''
level_in = 0
line_n   = 0

def formt(value, is_in_array = false)
  if is_in_array
    formt(value).gsub(/ \:\:.*$/, '')
  elsif value.ruby_value.is_a?(Array)
    formatted_content = value.ruby_value.map { |i| formt(i, true) }.join(', ').light_white
    ('[' +
    formatted_content +
    ']')
  else
    if value.ruby_value.is_a?(String) &&
      value.ruby_value.start_with?('def') && value.type == 'Function' # A Function
      rbval = value.ruby_value
      "#{rbval} :: #{value.type}(#{value.arg_type.join(', ')}): #{value.type_ret}"   # 3. Print
    elsif value.name
      "#{value.name} :: #{value.ruby_value}"
    else
      rbval = value.ruby_value.inspect # A normal variable or literal
      "#{rbval} :: #{value.name || value.type}"   # 3. Print
    end
  end
end
# If a file is given we eval it.
if ARGV.first
  begin
    interpreter.eval File.read(ARGV.first)
  rescue => e
    line = if e.is_a?(BikeError) then e.line else line_n end
    puts "LINE #{line}: ERROR: ".red.gsub('\n', '') + e.message.yellow.gsub(/\(.*\)/, '').gsub('\n', '')
    puts e.backtrace.join("\n") if debug
  end
else
  puts 'Importing Wheels...'
  interpreter.eval 'import Wheels'
  puts ''
  puts "Bike Programming Language REPL\n" \
  "(Type :help for help, and :exit to exit)\n" \
  "(See LICENSE.md for licensing information)"
  puts "By Christopher Dumas in 2014".green
  loop do
    unless continue
      level_in = 0
      line = Readline.readline(prompt_1.blue)    # 1. Read
      code = line

      continue = !code.valid_code?
      while continue
        line = Readline.readline(prompt_2.red)    # 1. Read
        code += "\n#{line}"
        history += "\n#{line}"

        continue = !code.valid_code?
        line = code unless continue
      end
    end
    Readline::HISTORY.push(line)
    line = line.strip
    case line
    when ':exit'
      puts 'Bye!'.blue
      exit
    when ':help'
      puts <<-eos
      :help            - This help
      :exit            - To exit from the REPL
      :lexer           - To have your input lexed only, but not interpreted
      :parser          - To have your input parsed only, but not interpreted
      :history         - List history
      :clear           - Clear Screen (also CTRL-L)
      :debug           - Sets Debug mode (For language contributors only)
      :save_history    - Saves history to repl file.
      eos
    when ':history'
      puts 'HISTORY'.yellow
      puts '-------'.yellow
      Readline::HISTORY.to_a.each { |e| puts e }
    when ':save_history'
      File.open("history_bike_repl.bk", "w") do |file|
        file.write(code)
      end
    when ':clear'
      system('clear') || system('cls')
    when ':debug'
      debug = !debug
      if debug
        puts 'Entering Debug mode. To go back to normal mode, type :debug again.'.red
      else
        puts 'Leaving Debug mode now.'.green
      end
    when ':save'
      File.open('repl_save.bk', 'w') do |file|
        file.write(history)
      end
      puts 'Successfully saved code to \'repl_save.bk\''.green
    when ':lexer'
      lexer = !lexer
      if lexer
        puts 'Entering Lexer mode. To go back to normal mode, type :lexer again.'.red
      else
        puts 'Leaving Lexer mode now.'.green
      end
    when ':parser'
      parser = !parser
      if parser
        puts 'Entering Parser mode. To go back to normal mode, type :parser again.'.red
      else
        puts 'Leaving Parser mode now.'.green
      end
    else
      if lexer
        value = Lexer.new.tokenize(line)
        puts "#{value.inspect}"     # 3. Print
      elsif parser
        value = Parser.new.parse(line)
        puts "#{value.inspect}"     # 3. Print
      else
        history += "\n#{line}"
        line_n += 1
        prompt_1 = "[#{line_n}] >> "
        begin
          value = interpreter.eval(line) # 4. Eval
        rescue => e
          puts "LINE #{line_n}: ERROR: ".red.gsub('\n', '') + e.message.yellow.gsub(/\(.*\)/, '').gsub('\n', '')
          puts e.backtrace.join("\n") if debug
          value = interpreter.eval('nil')
        end

        puts '<= ' + formt(value)
      end
    end                                      # 4. Loop
  end
end
