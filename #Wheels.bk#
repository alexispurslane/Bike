package {
  package Math {
    def E       = 2.71828182845904523536028747135266249775724709369995957496696763
    def Pi      = 3.14159265358979323846264338327950288419716939937510582097494459
    def Phi     = 1.61803398874989484820458683436563811772030917980576286213544862
    def Sqrt2   = 1.41421356237309504880168872420969807856967187537694807317667974
    def SqrtE   = 1.64872127070012814684865078781416357165377610071014801157507931
    def SqrtPi  = 1.77245385090551602729816748334114518279754945612238712821380779
    def SqrtPhi = 1.27201964951406896425242246173749149171560804184009624861664038
    def Ln2     = 0.693147180559945309417232121458176568075500134360255254120680009
    def Log2E   = 1 / Ln2
    def Ln10    = 2.30258509299404568401799145468436420760110148862877297603332790
    def Log10E  = 1 / Ln10 
  }
  
  package List {
    def head (list) = list[0]
    def tail (list) = list - list[0]
    def last (list) = list[list.length - 1]
    def butlast (list) = list - list[list.length - 1]

    def reverse (list) {
      def reverse_inner (list, so_far) {
        if list isnt [] {
          reverse_inner(butlast(list), so_far + [last(list)])
        } else { so_far }
      }
      reverse_inner(list, [])
    }

    def intersperse (el, list) {
      
    }
    
    def map (f, list) {
      if list isnt [] {
        [f $ (head(list))] + map(f, tail(list))
      } else {
        []
      }
    }

    def each (f, list) {
      for e of list {
        f $ (e)
      }
    }
  }
}