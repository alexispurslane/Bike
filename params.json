{"name":"The Bike Programming language","tagline":"A bike is the most efficient man-powered vehicle...","body":"# Bike Language\r\n\r\n## What's it all about?\r\nBike is a programming language born out of my need to have a practical, yet purely functional programming language,\r\nwith a syntax that not only matches the elegance of Python, but the terseness of Swift, and the FP\r\nbevity of Haskell.\r\n\r\nI think that Bike does all of this. It has a fairly substantial standard library, far bigger that that of JavaScript,\r\nbut still smaller that of Haskell.\r\n\r\nOOP is carried out in a way that stays true to functional programming, and stays out of your way when your just trying to get things done. Objects and Classes are pure, and immutable, createing a good way to encapsulate code, without the normal OOP problems.\r\n\r\n# Install\r\n\r\n    git clone https://github.com/christopherdumas/Bike.git\r\n    cd Bike/\r\n    # You might need to install ruby.\r\n    ./configure # Install all the needed GEMs\r\n    ./bin/bike # Get started!\r\n\r\n# Documentation\r\n\r\nDocumentation is sparse currently, since I am not a great technical writer, but reading the code in `grammar.y` might be helpful. Documentation is a big target, that I do want to hit, probably around beta 10. (Is there ever going to be a 1.0? Maybe not!)\r\n\r\n## [Version History](https://github.com/christopherdumas/Bike/releases)\r\n### beta 9: Raptor\r\nMore bugs fixed, and (almost) total Rubocop compliance. A gigantic refactor *was* in order. Plus, some new features:\r\n  * Algebraic Datatypes\r\n  * Better Debuging and error information\r\n  * Better repl formatting\r\nAlso some minor bugs were fixed:\r\n  * Type information should be saved during currying\r\n  * Function return type was being ignored\r\n\r\n### beta 8: Rackoon\r\nFixed a lot of OOP features, added optional typing and arguments, and added other little fixes.\r\n### beta 7: Pipe\r\nThis release adds a modest amount of new list functions, utility functions, fixes, and a website. Also, it adds a function application operator, that works like this: `Exp |> Func`, so that you could do something like:\r\n `1 |> add1 |> add1 |> add1 |> add1`\r\n### beta 6: Elephant\r\nRemoved a ton of features that were unnecessary, such as:\r\n  * Spread and rest parameters\r\n  * Anonymous functions\r\n  * Weird Lambda syntax (replaced by `{ (<arg ...>) -> <body> }`)\r\n  * Mixins\r\n  * Weird @/set array syntax (replaced by more normal array access syntax, but no setting.)\r\n  * Mutations on classes, arrays, hashes, or packages, and mutable variable declarations\r\n  * Added array destructuring\r\n\r\nNow working on:\r\n  * Argument destructuring\r\n  * Bigger Wheels list package\r\n  * optional typing? - I like the dynamic ruby-ishness of Bike currently, but optional typing could be useful for documentation and preventing errors\r\n\r\n\r\nThe reason for this? (1) I came back to Bike after almost a year, and realized that it had a ton of bloat. Also, most of the code was written while I had a low grade fever. Bad idea. (2) I found a sketch of a programming language in an old notebook, and decided that it was nice, and something I would want to program in, so I am working to make Bike like it.\r\n### beta 5: Hottrix (really bad name, I know)\r\nThis release basically had every single heisenbug that could possibly happen to a language designer. I fixed them all, and updated documentation and syntax as well. On the way, I added some well-needed little tricks.\r\n### beta 4: Watcher\r\nThis release adds:\r\n - Closures\r\n - Real computed Properties and getters (plus setters!)\r\n - private and public modifiers\r\n - `for-of`\r\n - `elseif`\r\n - Sets\r\n - Observers\r\n\r\n### beta 3: Hydra\r\nThis release adds these features to the Beta 2 release:\r\n -  Arrow functions\r\n -  Destructuring assignment (for Hashes and Anonymous Classes)\r\n -  String Concatenation\r\n -  Anonymous Classes\r\n -  Hashes (Anonymous Classes with syntactic sugar)\r\n -  Rest Arguments\r\n -  Documented Source, with RDoc\r\n -  Splat Arguments\r\n -  Types (internal difference. No one will notice.)\r\n\r\n### beta 2: Drabbit\r\nThis release was the first actually implemented part of Bike. For the first time, I could actually run something.\r\nThis release had:\r\n\r\n* anonymous functions (but no closures yet)\r\n* functions\r\n* variables\r\n* classes\r\n* inheritance\r\n* a few library functions\r\n* extendable Number, Object, Class, and String types\r\n* packages\r\n* imports (RequireJS style)\r\n* getters\r\n* computed properties\r\n* mixins\r\n\r\nAlso a color REPL with history, tab completion, a lexer mode, and a history list mode.\r\n\r\n## Roadmap\r\n### beta 10\r\n- [x] Typealias\r\n- [x] Better Algebraic Datatype support in the type system\r\n- [ ] Improved Algebraic Datatypes\r\n- [ ] Class and function metadata\r\n- [ ] Documentation/Tutorial\r\n- [ ] Getting Started\r\n- [ ] Report error Line number\r\n\r\n### 1.0\r\n- [ ] Another major refactor\r\n- [ ] Code documentation (Yardoc?)\r\n- [ ] Improve Wheels\r\n\r\n### 1.1\r\n- [ ] Atom, Emacs, Vim and Sublime Text syntax highlighting\r\n- [ ] Observers\r\n- [ ] Ratios\r\n- [ ] Fractions\r\n\r\n### 1.2 and Beyond!\r\n- [ ] Publicize!\r\n- [ ] Write a big project of some sort in Bike, to make it look more real to people\r\n- [ ] Macros?\r\n- [ ] Metaprogramming?\r\n- [ ] Dynamic method/variable/class names?\r\n- [ ] Book\r\n- [ ] Screencasts\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}